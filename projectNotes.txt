*** Project Notes on WorkSphere Responsive Full-Stack Project ***

Tech Stack:
   - FrontEnd: Js, React, tailwindCSS, react-form-hook, react-router-dom, @headlessUi[For Modals, Menu and DropDown]
   - BackEnd: Node, Express, MongoDB [as Primary DataBase], Cloudinary [Store images]

1) FrontEnd Design [React JS + Redux]

** Project Routes & Navigation:
   -- NPM Package Used: react-router-dom.
   -- In main.jsx, the app component is wrapped with BrowserRouter.
   -- In App.jsx, Route component is used to Handle the navigation to different Pages.
   
   Features:
      -- Before Naviagting to a Page, It checks if the user is loggedin or not ?
      -- Achieved using 
         - Routes [Holds Route url-component Mapping for all Pages], 
         - Outlet [Renders sub-Routes]
         - Naviagte [Naviagte to Particular Url]

** Project Components:
   - Navbar [Custom Menu, @headLessUi]             - SignUp [Dialog Model, @headLessUi]
   - Footer                                        - Header
   - TextInput                                     - Loading
   - CustomButton                                  - ListBox [Custom DropDown, @headlessUi]
   - JobCard, JobType                              - CompanyCard

Notable Features of Components:
   -- Navbar provides a collapsable Hamburger Icon Menu on mobile view and is responsive by design.
   -- Navbar provides Navigation Options to different Pages Supported by the app. It also Provides User to SignIn/LogIn/LogOut of the Application. 
   -- SignUp Component is designed based on a Popup Model. Provide User Options either to Register or Login to application. Includes Field Validations.
   -- Header, Provides and Manages User Search Filter For Jobs in the HomePage.
   -- Footer, Holds Options to Naviagte to Application's help and support, User can Suscribe to Company's NewsLetter.
   -- TextInput, Manages the Text Input Field used in the Application.
   -- Loading, Provide a pulse Animation while waiting for the backend resp.

** Redux Store Setup [Global State Management]
   -- Packages Used: react-redux, @reduxjs/toolkit.
   -- In Main.jsx, Provider Component Wraps Up the whole App Component. Makes Redux Store accessable to all Components under App.
   -- Redux store holds the loggedin UserInfo.
   -- userSlice,
      - Defines the initial Redux Store state for the user.
      - defines the actions and the linked Reducers.
      - logIn and logout Actions are exported for furthur use in the App.
   -- In App,
      - WhereEver we need the redux store state, useSelector() hook has access to the store's info.
      - To dispatch any actions to the store, We can use the instance of useDispatch to dispatch an action with the desire payload.
   
** Project Landing Pages Features:
   -- AuthPage:
      - Page Shows Modal view For Either Register New User or logIn Existing User.
   -- FindJobs [Home Page]:
      - Application Lanidng Page.
      - It includes a Search bar, For the User to Filter the Jobs based on Given Options.
      - User can View all the Recent Job Postings in Form of Clickable Cards, That OnClick Naviagtes to the jobDetails Page.
   -- JobDetail:
      - Shows details related to a particular Job.
      - Include Information like jobDescription, salary, jobTitile, Experience Requirements.
      - User can also see, Similar Jobs Options to select from if he wishes.
   -- UploadJob:
      - This Page can be used by Company to Uplod new Job Offers.
      - It's built based on React-form-hook and includes Validation.
   -- Companies:
      - This Page Shows all the Registered Companies.
      - User also can see the number of Jobs Posted by each one of these companies.
   -- UserProfile/CompanyProfile:
      - This Pages Shows informtion about the respective Company or user.
      - It is Provides the Company or the User to update their latest Details in the Application.
   -- AboutUs:
      - A Page describing the features and adavantages of using WorkSphere Application.


2) BackEnd Design [Node JS + Mongo]

** Packages Used:
   - express, expressRouter. [Defining Routes For APIs]
   - mongoose [Connect to mongoDB, Managing the MongoSchema and SchemaValidation]
   - morgan [logs the Api Requests to the server]
   - crypto [Generate and validate Password]
   - JsonwebToken [Generates and verify Auth Bearer token]
   - nodemon [Auto Re-start the server]

** Implementing the basic Server Design using Express and Routes
   -- Express frameWork is followed for the server design.
   -- Routes are defined for the REST APIs for users, Company and Jobs.
   -- Mongoose Schema is used to design the basic data storage Layout for each of the Routes.
   -- Routes, Router and Route we have used to group CRUD Method having the same end-point URL.
   -- In Routes, Auth and basic Error catching Middleware we have included before actually Querying the DB.
   -- Controllers, We have defined the Mandatory field Validation and perform the respective CRUD Operations.
   -- Controllers, We have used mongoose Query to Filter Out the DB Queries and exectute it later. [Implemented Custom Query Filteration of the data fetched from DB]
   -- Error Handling,
      - In Route, Controller Methods are passed through a middleware function, that catches any Error in them during Query Execution.
      - On Error Encounter, we send the error to next(err).
      - This is catched by the Express Error handling Middleware and Proper message is displayed. 

** Implementation of Authentication using crypto.
   - Crypto package is used to handle the encryption of the user's password. [crypto is available, no need to import seperately]
   - crypto.randomBytes() -> Generates a 128Bytes,base64 String.
   - crypto.craeteHmac() -> It is used to encypt the [salt + password] with a sha256 encryption.
   - The parsed Pass is stored in the DB.
   - For Password Verification:
     - The Password Given by the user is passed through the same createHmac function, and then we compare the stored and newly parsed Password.  

** Implementation of jwt in Authentication and Authorization.
   - jwt: json web token.
   - Package used: jwt from jsonwebtoken
   - Jwt.sign() -> Can be used to generate a new Json webToke.
      - The Token generated, can store any payload if needed, includes a secret_key and a expire Data.
   - Jwt.verify() -> It is used to verify if the Token is valid based on the secret_key or If it is expired.

** Implementing Middleware to handle Errors and Auth.
   - In Routes, Before hitting the actual Controller Functions, Each API call goes through a series of Functions.
   - This Functions are:
      - isAuthenticated [Validates the jwt token passed in Header, If valid stores the authorId from the token to req body]
      - isCompany [Validates if the authorId extracted from the token belongs to a company or User, use for Restricting API calls to Company Only]

3) Integration of FrontEnd and Backend using APIs

NOTE: 3 things handling page to page Navigation and previous Page Naviagtion
   1. The Route, Outlet and Naviagate Structure Code in App.jsx
   2. The use of useLoaction() to fetch curr Page location.
   3. using window.location.replace(newurl) OR navigate(newurl, {replace: true}) [from useNavigation()] 


Login Creds:

For Company: 
   test@exp12344.com/12345678
   test@exp224123.com/12345678
For User: 
   testuser@gmail.com/12345678

   
** Bugs: 

   1) When the token Expires, Just the '/' page opens, Others are not loading., 
      -- The Home page should make the user login again.
   2) A Company can Apply in the Other Companies Jobs. [Restrict it to Just Seekers Only]
   3) Seeker Job Apply and Company View Job Application Functionality.